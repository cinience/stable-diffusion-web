edition: 1.0.0
name: stable-diffusion-web
# access 是当前应用所需要的密钥信息配置：
# 密钥配置可以参考：https://www.serverless-devs.com/serverless-devs/command/config
# 密钥使用顺序可以参考：https://www.serverless-devs.com/serverless-devs/tool#密钥使用顺序与规范
access: "{{ access }}"

vars: # 全局变量
  region: "{{ region }}"

services:
  fc-gpu: # 业务名称/模块名称
    component:  fc # 组件名称，Serverless Devs 工具本身类似于一种游戏机，不具备具体的业务能力，组件类似于游戏卡，用户通过向游戏机中插入不同的游戏卡实现不同的功能，即通过使用不同的组件实现不同的具体业务能力
    actions:       # 自定义执行逻辑，关于actions 的使用，可以参考：https://www.serverless-devs.com/serverless-devs/yaml#行为描述
    # 重要说明!!!
    # - 根据您选择直接使用官方公开示例镜像、或者从源码构建镜像这2种不同的方式，需要对s.yaml进行一些微调，具体说明如下：
    #    - 1. 如果您期望直接使用官方公开示例镜像，请删除/注释pre-deploy部分，这样将在s deploy阶段跳过构建镜像，直接进行部署（官网公开示例镜像均为public镜像，无须构建可直接在函数中使用）。
    #    - 2. 如果您期望从源码构建镜像，则保留pre-deploy部分，这样将在s deploy阶段自动构建镜像，然后进行部署。
    #pre-deploy:
    #  - component: fc build --use-docker --dockerfile ./code/Dockerfile  # 要运行的组件，格式为【component: 组件名 命令 参数】（可以通过s cli registry search --type Component 获取组件列表）
    props:
      region: ${vars.region}              # 关于变量的使用方法，可以参考：https://www.serverless-devs.com/serverless-devs/yaml#变量赋值
      service:
        name: "{{ serviceName }}"
        description: "stable-diffusion-webui(超火的AI绘画)"
        logConfig: auto
        role: "{{ roleArn }}"
        ossMountConfig:
          mountPoints:
            - bucketName: "{{ bucketName }}"
              endpoint: "http://oss-{{ region }}-internal.aliyuncs.com"
              bucketPath: ''
              mountDir: /data
              readOnly: false
            - bucketName: "{{ bucketName }}"
              endpoint: "http://oss-{{ region }}-internal.aliyuncs.com"
              bucketPath: ''
              mountDir: /output
              readOnly: false
      function:
        name: "{{ functionName }}"
        description: "This is an API that detects the GPU instance environment"
        caPort: 7860
        memorySize: 8192
        gpuMemorySize: 4096
        instanceType: g1
        timeout: 300
        instanceConcurrency: 100
        runtime: custom-container
        customContainerConfig:
          image: "{{ acrRegistry }}"
#          command: ['ls /data && python -u webui.py --listen --port 7860']
        codeUri: ./code
      triggers:
        - name: httpTrigger
          type: http
          config:
            authType: anonymous
            methods:
              - GET
              - POST
              - HEAD
              - PUT
              - DELETE
              - OPTIONS
      customDomains:
        - domainName: auto
          protocol: HTTP
          routeConfigs:
            - path: /*
              methods:
                - GET
                - POST
                - HEAD
                - PUT
                - DELETE
                - OPTIONS

